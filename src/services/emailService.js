import crypto from "crypto";
import {
  sendEmail,
  verificationEmailTemplate,
  resetPasswordEmailTemplate,
} from "../config/emailConfig.js";
import Token from "../models/token.js";
import User from "../models/user.js";
import dotenv from "dotenv";
import bcrypt from "bcryptjs";

dotenv.config();

// T·∫°o token x√°c th·ª±c
const generateVerificationToken = async (userId) => {
  // T·∫°o token ng·∫´u nhi√™n
  const token = crypto.randomBytes(32).toString("hex");

  // L∆∞u token v√†o database
  await Token.create({
    userId,
    token,
    type: "verification",
  });

  return token;
};

// G·ª≠i email x√°c th·ª±c t√†i kho·∫£n
const sendVerificationEmail = async (user, baseUrl) => {
  try {
    // T·∫°o token x√°c th·ª±c
    const token = await generateVerificationToken(user._id);

    const frontendUrl = process.env.FRONTEND_URL || baseUrl;

    // T·∫°o link x√°c th·ª±c
    const verificationLink = `${frontendUrl}/verify-email/${token}`;

    // Thi·∫øt l·∫≠p th√¥ng tin email
    const emailContent = verificationEmailTemplate(
      user.firstName,
      verificationLink
    );

    // Th√¥ng tin ng∆∞·ªùi nh·∫≠n
    const mailOptions = {
      from: `"MarxEdu" <${process.env.EMAIL_USER}>`,
      to: user.email,
      subject: emailContent.subject,
      html: emailContent.html,
    };

    // G·ª≠i email
    await sendEmail(mailOptions);

    return {
      success: true,
      message: "Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i",
    };
  } catch (error) {
    console.error("Send verification email error:", error);
    return {
      success: false,
      message: "Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c",
      error: error.message,
    };
  }
};

// X√°c th·ª±c email b·∫±ng token
const verifyEmail = async (token) => {
  try {
    // T√¨m token trong database
    const verificationToken = await Token.findOne({
      token,
      type: "verification",
    });

    if (!verificationToken) {
      return {
        success: false,
        statusCode: 400,
        message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
      };
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c c·ªßa ng∆∞·ªùi d√πng
    const user = await User.findByIdAndUpdate(
      verificationToken.userId,
      { isVerified: true },
      { new: true }
    );

    if (!user) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      };
    }

    // X√≥a token sau khi ƒë√£ s·ª≠ d·ª•ng
    await Token.findByIdAndDelete(verificationToken._id);

    return {
      success: true,
      statusCode: 200,
      message: "X√°c th·ª±c email th√†nh c√¥ng",
      user: {
        id: user._id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        isVerified: user.isVerified,
      },
    };
  } catch (error) {
    console.error("Verify email error:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói h·ªá th·ªëng",
      error: error.message,
    };
  }
};

// T·∫°o token reset password
const generateResetPasswordToken = async (userId) => {
  // T·∫°o token ng·∫´u nhi√™n
  const token = crypto.randomBytes(32).toString("hex");

  // L∆∞u token v√†o database v·ªõi th·ªùi h·∫°n 1 gi·ªù
  await Token.create({
    userId,
    token,
    type: "reset-password",
  });

  return token;
};

// G·ª≠i email reset password
const sendResetPasswordEmail = async (user, baseUrl) => {
  try {
    // T·∫°o token reset password
    const token = await generateResetPasswordToken(user._id);

    const frontendUrl = process.env.FRONTEND_URL || baseUrl;

    // T·∫°o link reset password
    const resetLink = `${frontendUrl}/reset-password/${token}`;

    // Thi·∫øt l·∫≠p th√¥ng tin email
    const emailContent = resetPasswordEmailTemplate(user.firstName, resetLink);

    // Th√¥ng tin ng∆∞·ªùi nh·∫≠n
    const mailOptions = {
      from: `"MarxEdu" <${process.env.EMAIL_USER}>`,
      to: user.email,
      subject: emailContent.subject,
      html: emailContent.html,
    };

    // G·ª≠i email
    await sendEmail(mailOptions);

    return {
      success: true,
      message: "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i",
    };
  } catch (error) {
    console.error("Send reset password email error:", error);
    return {
      success: false,
      message: "Kh√¥ng th·ªÉ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      error: error.message,
    };
  }
};

// X√°c th·ª±c token reset password v√† c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
const resetPassword = async (token, newPassword) => {
  try {
    // T√¨m token trong database
    const resetToken = await Token.findOne({
      token,
      type: "reset-password",
    });

    if (!resetToken) {
      return {
        success: false,
        statusCode: 400,
        message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
      };
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u ng∆∞·ªùi d√πng
    const user = await User.findByIdAndUpdate(
      resetToken.userId,
      { password: hashedPassword },
      { new: true }
    );

    if (!user) {
      return {
        success: false,
        statusCode: 404,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      };
    }

    // X√≥a token sau khi ƒë√£ s·ª≠ d·ª•ng
    await Token.findByIdAndDelete(resetToken._id);

    return {
      success: true,
      statusCode: 200,
      message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng",
    };
  } catch (error) {
    console.error("Reset password error:", error);
    return {
      success: false,
      statusCode: 500,
      message: "L·ªói h·ªá th·ªëng",
      error: error.message,
    };
  }
};

// G·ª≠i email x√°c nh·∫≠n booking
const sendBookingConfirmation = async (appointment) => {
  try {
    const customer = appointment.customer;
    const vehicle = appointment.vehicle;
    const serviceCenter = appointment.serviceCenter;
    const serviceType = appointment.serviceType;

    const appointmentDate = new Date(appointment.appointmentTime.date).toLocaleDateString('vi-VN');
    const appointmentTime = appointment.appointmentTime.startTime;

    // T·∫°o n·ªôi dung email
    const emailContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; color: white;">
          <h1 style="margin: 0; font-size: 28px;">EVCare</h1>
          <p style="margin: 10px 0 0 0; font-size: 16px;">X√°c nh·∫≠n ƒë·∫∑t l·ªãch b·∫£o d∆∞·ª°ng</p>
        </div>
        
        <div style="padding: 30px; background: #f8f9fa;">
          <h2 style="color: #333; margin-bottom: 20px;">Xin ch√†o ${customer.fullName || customer.username}!</h2>
          
          <p style="color: #666; line-height: 1.6; margin-bottom: 20px;">
            C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t l·ªãch b·∫£o d∆∞·ª°ng t·∫°i EVCare. Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu c·ªßa b·∫°n v√† ƒëang x·ª≠ l√Ω.
          </p>
          
          <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <h3 style="color: #333; margin-bottom: 15px;">Th√¥ng tin ƒë·∫∑t l·ªãch</h3>
            <table style="width: 100%; border-collapse: collapse;">
              <tr>
                <td style="padding: 8px 0; color: #666; width: 120px;">Xe:</td>
                <td style="padding: 8px 0; color: #333; font-weight: 500;">${vehicle.vehicleInfo.vehicleModel.brand} ${vehicle.vehicleInfo.vehicleModel.modelName} ${vehicle.vehicleInfo.year}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; color: #666;">Bi·ªÉn s·ªë:</td>
                <td style="padding: 8px 0; color: #333; font-weight: 500;">${vehicle.vehicleInfo.licensePlate}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; color: #666;">D·ªãch v·ª•:</td>
                <td style="padding: 8px 0; color: #333; font-weight: 500;">${serviceType.name}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; color: #666;">Trung t√¢m:</td>
                <td style="padding: 8px 0; color: #333; font-weight: 500;">${serviceCenter.name}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; color: #666;">Ng√†y:</td>
                <td style="padding: 8px 0; color: #333; font-weight: 500;">${appointmentDate}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; color: #666;">Gi·ªù:</td>
                <td style="padding: 8px 0; color: #333; font-weight: 500;">${appointmentTime}</td>
              </tr>
              <tr>
                <td style="padding: 8px 0; color: #666;">Tr·∫°ng th√°i:</td>
                <td style="padding: 8px 0; color: #ff9800; font-weight: 500;">Ch·ªù x√°c nh·∫≠n</td>
              </tr>
            </table>
          </div>
          
          <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <p style="margin: 0; color: #1976d2; font-weight: 500;">
              üìû Li√™n h·ªá: ${serviceCenter.contact.phone} | ${serviceCenter.contact.email}
            </p>
            <p style="margin: 5px 0 0 0; color: #1976d2;">
              üìç ƒê·ªãa ch·ªâ: ${serviceCenter.address.street}, ${serviceCenter.address.ward}, ${serviceCenter.address.district}, ${serviceCenter.address.city}
            </p>
          </div>
          
          <p style="color: #666; line-height: 1.6; margin-bottom: 20px;">
            Trung t√¢m s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 24 gi·ªù ƒë·ªÉ x√°c nh·∫≠n l·ªãch h·∫πn. 
            Vui l√≤ng gi·ªØ ƒëi·ªán tho·∫°i ƒë·ªÉ nh·∫≠n cu·ªôc g·ªçi x√°c nh·∫≠n.
          </p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.FRONTEND_URL || 'https://evcare.com'}/my-bookings" 
               style="background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: 500; display: inline-block;">
              Xem l·ªãch h·∫πn c·ªßa t√¥i
            </a>
          </div>
        </div>
        
        <div style="background: #f1f3f4; padding: 20px; text-align: center; color: #666; font-size: 14px;">
          <p style="margin: 0;">¬© 2024 EVCare. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
          <p style="margin: 5px 0 0 0;">H·ªá th·ªëng qu·∫£n l√Ω b·∫£o d∆∞·ª°ng xe ƒëi·ªán th√¥ng minh</p>
        </div>
      </div>
    `;

    // Th√¥ng tin ng∆∞·ªùi nh·∫≠n
    const mailOptions = {
      from: `"EVCare" <${process.env.EMAIL_USER}>`,
      to: customer.email,
      subject: `X√°c nh·∫≠n ƒë·∫∑t l·ªãch b·∫£o d∆∞·ª°ng - ${appointmentDate} ${appointmentTime}`,
      html: emailContent,
    };

    // G·ª≠i email
    await sendEmail(mailOptions);

    return {
      success: true,
      message: "Email x√°c nh·∫≠n booking ƒë√£ ƒë∆∞·ª£c g·ª≠i",
    };
  } catch (error) {
    console.error("Send booking confirmation email error:", error);
    return {
      success: false,
      message: "Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n booking",
      error: error.message,
    };
  }
};

export default {
  sendVerificationEmail,
  verifyEmail,
  sendResetPasswordEmail,
  resetPassword,
  sendBookingConfirmation,
};
